version: 2.1
orbs:
  node: circleci/node@5.0.3
  jq: circleci/jq@2.2.0
parameters:
  node-version: 
    type: string
    default: "18.8.0"
executors:
  docker-executor:
    docker:
      - image: cimg/node:<< pipeline.parameters.node-version >>
jobs:
  lint_commit_messages:
    executor: docker-executor
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: yarn install --frozen-lockfile --cache-folder ~/.npm
      - save_cache:
          key: node-deps-{{arch}}-v1-{{ .Branch }}-{{checksum "yarn.lock"}}
          paths:
            - ~/.npm
      - run:
          name: Ensure commits follow conventional commits standards
          command: npx commitlint --from=$(git --no-pager rev-list --no-merges origin/main..HEAD | tail -n 1)
  release:
    executor:
      name: node/default
      tag: << pipeline.parameters.node-version >>
    steps:
      - checkout
      - jq/install
      - node/install-packages:
          pkg-manager: yarn
          override-ci-command: yarn install --forzen-lockfile --cache-folder ~/.npm
      - run:
          name: Publish to npm registry and create release notes
          command: yarn release --ci

      - when:
          condition:
            equal: [main, << pipeline.git.branch >>]
          steps:
            - run:
                name: Save SHA1 of the autogenerated commit with the latest tag version in main
                command: |
                  echo $(git log --grep="chore(release): $(git describe --tags --abbrev=0 | sed 's/v//') \[skip ci\]" --pretty=format:%H)
                  git log --grep="chore(release): $(git describe --tags --abbrev=0 | sed 's/v//') \[skip ci\]" --pretty=format:%H > .autogenerated-commit
      - unless:
          condition:
            equal: [main, << pipeline.git.branch >>]
          steps:
          - run:
              name: Save SHA1 of the autogenerated commit with the latest tag version on {{ .Branch }}
              command: |
                echo $(git log --grep="chore(release): $(git tag --sort=-v:refname | grep "<< pipeline.git.branch >>" -m 1 | sed 's/v//') \[skip ci\]" --pretty=format:%H)
                git log --grep="chore(release): $(git tag --sort=-v:refname | grep "<< pipeline.git.branch >>" -m 1 | sed 's/v//') \[skip ci\]" --pretty=format:%H > .autogenerated-commit
      - save_cache:
          key: v1-autogenerated-commit-{{ .Branch }}
          paths:
            - .autogenerated-commit

  e2e-tests:
    parameters:
      instalation-node-version:
        type: string
      target-node-version:
        type: string
    executor:
      name: node/default
      tag: << parameters.instalation-node-version >>
    environment:
      TARGET_NODE: << parameters.target-node-version >>
    steps:
      - restore_cache:
          keys:
            - v1-autogenerated-commit-{{ .Branch }}
      - run:
          name: Setup CIRCLE_SHA1 to the latest autogenerated commit hash
          command: |
            echo export CIRCLE_SHA1="$(cat .autogenerated-commit)" >> "$BASH_ENV"
            rm .autogenerated-commit
      - run:
          command: echo $CIRCLE_SHA1
      - run:
          name: Custom Checkout
          command: |
            mkdir -p ~/.ssh
            ssh-keyscan github.com >> ~/.ssh/known_hosts

            # use git+ssh instead of https
            git config --global url."ssh://git@github.com".insteadOf "https://github.com" || true
            git config --global gc.auto 0 || true

            echo 'Cloning git repository'
            existing_repo='false'
            mkdir -p '/home/circleci/project'
            cd '/home/circleci/project'
            git clone --no-checkout "$CIRCLE_REPOSITORY_URL" .

            echo 'Fetching from remote repository'
            if [ -n "$CIRCLE_TAG" ]; then
              git fetch --force --tags origin
            else
              git fetch --force origin +refs/heads/beta:refs/remotes/origin/beta
            fi

            echo "using sha1: $CIRCLE_SHA1"

            if [ -n "$CIRCLE_TAG" ]; then
              echo 'Checking out tag'
              git checkout --force "$CIRCLE_TAG"
              git reset --hard "$CIRCLE_SHA1"
            else
              echo 'Checking out branch'
              git checkout --force -B "$CIRCLE_BRANCH" "$CIRCLE_SHA1"
              git --no-pager log --no-color -n 1 --format='HEAD is now at %h %s'
            fi
      - node/install-packages:
          pkg-manager: yarn
          override-ci-command: yarn install --forzen-lockfile --cache-folder ~/.npm
      - run:
          name: Swap node version to << parameters.target-node-version >>
          command: |
            set +e
            wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"
            nvm install v<< parameters.target-node-version >>
            nvm alias default v<< parameters.target-node-version >>

            echo 'export NVM_DIR="$HOME/.nvm"' >> $BASH_ENV
            echo '[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"' >> $BASH_ENV
      - when:
          condition:
              equal: [main, << pipeline.git.branch >> ]
          steps:
            - run:
                name: Install envchecker-cli package from the @latest distribution channel
                command: |
                  echo "Installing using node $(node --version)"
                  yarn global add envchecker-cli@latest
      - unless:
          condition:
              equal: [main, <<pipeline.git.branch >>]
          steps:
            - run:
                name: Install envchecker-cli package from the distribution channel matching the branch
                command: |
                  echo "Installing using node $(node --version)"
                  yarn global add envchecker-cli@<< pipeline.git.branch >>
      - run:
          name: Switch to node v<<parameters.instalation-node-version>> and Run E2E tests
          command: |
            nvm use v<< parameters.instalation-node-version >>
            node --version
            yarn e2e-tests --test-env=TARGET_NODE=<< parameters.target-node-version>>


workflows:
  # PR checks
  checks:
    jobs:
      - lint_commit_messages:
          filters:
                branches:
                  ignore:
                    - main
                    - alpha
                    - beta
                    - +([0-9])?(.{+([0-9]),x}).x
                    - next
                    - next-major
      - node/test:
          pkg-manager: yarn
          version: << pipeline.parameters.node-version >>
          override-ci-command: yarn install --forzen-lockfile --cache-folder ~/.npm
          filters:
              branches:
                ignore:
                  - main
                  - alpha
                  - beta
                  - +([0-9])?(.{+([0-9]),x}).x
                  - next
                  - next-major
              
  # Protected branch deployments
  build_and_publish:
    jobs:
      - lint_commit_messages:
          filters:
                branches:
                  only:
                    - main
                    - alpha
                    - beta
                    - +([0-9])?(.{+([0-9]),x}).x
                    - next
                    - next-major
      - node/test:
            pkg-manager: yarn
            version: << pipeline.parameters.node-version >>
            override-ci-command: yarn install --forzen-lockfile --cache-folder ~/.npm
            filters:
              branches:
                only:
                  - main
                  - alpha
                  - beta
                  - +([0-9])?(.{+([0-9]),x}).x
                  - next
                  - next-major
      - release:
          requires:
            - node/test
            - lint_commit_messages
          filters:
            branches:
              only:
                - main
                - alpha
                - beta
                - +([0-9])?(.{+([0-9]),x}).x
                - next
                - next-major
      - e2e-tests:
          requires:
            - release
          matrix:
            parameters:
              instalation-node-version: [ << pipeline.parameters.node-version >> ]
              target-node-version: ["12.10.0", "12.22.12", "14.0.0", "14.20.1", "16.0.0", "16.18.0", "18.0.0", "18.10.0"]
          filters:
            branches:
              only:
                - main
                - alpha
                - beta
                - +([0-9])?(.{+([0-9]),x}).x
                - next
                - next-major
